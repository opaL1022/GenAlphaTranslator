{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;;;UAAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBa;AACb,aAAa,mBAAO,CAAC,2DAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,IAAI;AACrE,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA","sources":["webpack://genalphatranslator/webpack/bootstrap","webpack://genalphatranslator/./src/content.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nconst dict = require('../public/dictionary.json');\nif (!dict) {\n    console.log(\"dictionary.json is empty\");\n}\nconsole.log(dict);\nconsole.log('Content script loaded!');\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"enable\") {\n        enableFeature();\n    }\n    else if (message.action === \"disable\") {\n        disableFeature();\n    }\n});\nfunction enableFeature() {\n    console.log(\"功能已啟用\");\n    const convertTextToUppercase = (node) => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            const parent = node.parentElement;\n            if (parent && !parent.dataset.modified) {\n                let context = [];\n                if (node.nodeValue) {\n                    let texts = node.nodeValue.split(/(\\s+|[.,!?;(){}[\\]\"':])/).filter(Boolean);\n                    for (let i = 0; i < texts.length; i++) {\n                        let word = texts[i].toLowerCase();\n                        if (word in dict) {\n                            let cap = /^[A-Z]$/.test(texts[i].charAt(0));\n                            let text = dict[word][0];\n                            context.push(cap ? text.charAt(0).toUpperCase() + text.slice(1) : text);\n                        }\n                        else {\n                            context.push(texts[i]);\n                        }\n                    }\n                }\n                node.nodeValue = context.join('');\n                parent.dataset.modified = 'true';\n            }\n        }\n    };\n    const traverseAndModify = (root) => {\n        const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, {\n            acceptNode: (node) => {\n                const parent = node.parentNode;\n                if (parent && ['SCRIPT', 'STYLE', 'TEXTAREA'].includes(parent.tagName)) {\n                    return NodeFilter.FILTER_REJECT; // 跳過不處理\n                }\n                return NodeFilter.FILTER_ACCEPT;\n            },\n        });\n        let node;\n        while ((node = walker.nextNode())) {\n            convertTextToUppercase(node);\n        }\n    };\n    traverseAndModify(document.body); // 執行靜態文本修改\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n                if (node.nodeType === Node.ELEMENT_NODE) {\n                    traverseAndModify(node);\n                }\n            });\n            if (mutation.type === 'characterData') {\n                convertTextToUppercase(mutation.target);\n            }\n        });\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        characterData: true,\n    });\n    console.log('Text content successfully converted to uppercase and monitored!');\n}\nfunction disableFeature() {\n    console.log(\"功能已禁用\");\n    window.location.reload();\n}\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"content.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://genalphatranslator/./src/content.ts"],"sourcesContent":["\"use strict\";\nconsole.log('Content script loaded!');\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"enable\") {\n        enableFeature();\n    }\n    else if (message.action === \"disable\") {\n        disableFeature();\n    }\n});\nfunction enableFeature() {\n    console.log(\"功能已啟用\");\n    // 啟用功能的邏輯\n    // 將文本內容改為大寫\n    const convertTextToUppercase = (node) => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // 確保文本內容存在，並檢查是否已修改過\n            const parent = node.parentElement;\n            if (parent && !parent.dataset.modified) {\n                node.nodeValue = node.nodeValue?.toUpperCase() || '';\n                parent.dataset.modified = 'true'; // 添加標記，避免重複處理\n            }\n        }\n    };\n    // 遍歷 DOM 並應用替換\n    const traverseAndModify = (root) => {\n        const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, {\n            acceptNode: (node) => {\n                const parent = node.parentNode;\n                if (parent && ['SCRIPT', 'STYLE', 'TEXTAREA'].includes(parent.tagName)) {\n                    return NodeFilter.FILTER_REJECT; // 跳過不處理\n                }\n                return NodeFilter.FILTER_ACCEPT;\n            },\n        });\n        let node;\n        while ((node = walker.nextNode())) {\n            convertTextToUppercase(node);\n        }\n    };\n    // 執行靜態文本修改\n    traverseAndModify(document.body);\n    // 監聽 DOM 的動態變化，處理新增節點和被覆蓋的文本\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            // 處理新增節點\n            mutation.addedNodes.forEach((node) => {\n                if (node.nodeType === Node.ELEMENT_NODE) {\n                    traverseAndModify(node);\n                }\n            });\n            // 處理已存在節點的變化\n            if (mutation.type === 'characterData') {\n                convertTextToUppercase(mutation.target);\n            }\n        });\n    });\n    observer.observe(document.body, {\n        childList: true, // 監聽子節點的新增或刪除\n        subtree: true, // 監聽整個子樹\n        characterData: true, // 監聽文本內容的變化\n    });\n    console.log('Text content successfully converted to uppercase and monitored!');\n}\nfunction disableFeature() {\n    console.log(\"功能已禁用\");\n    // 禁用功能的邏輯\n    window.location.reload();\n}\n"],"names":[],"sourceRoot":""}